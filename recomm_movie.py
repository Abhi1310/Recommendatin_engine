# -*- coding: utf-8 -*-
"""Recomm_Movie.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kLScgBuy_WDhIi3iPyLmZvQJWKpHpGF8
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

# user information
u_cols = ['user_id', 'age', 'sex', 'occupation', 'zip_code']
user_df = pd.read_csv('/gdrive/My Drive/Recom_Engine/user.txt', sep='|', names=u_cols)

user_df.head()

# ratings given by the user
r_cols = ['user_id', 'movie_id', 'rating', 'unix_timestamp']
rating_df = pd.read_csv('/gdrive/My Drive/Recom_Engine/rating.txt', sep='\t', names=r_cols)

rating_df.head()

# movies information

i_cols = ['movie id', 'movie title' ,'release date','video release date', 'IMDb URL', 'unknown', 'Action', 'Adventure',
'Animation', 'Children\'s', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Fantasy',
'Film-Noir', 'Horror', 'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Thriller', 'War', 'Western']
movie_df = pd.read_csv('/gdrive/My Drive/Recom_Engine/item.txt', sep='|', names=i_cols,encoding='latin-1')

movie_df.head(10)

print('user shape' , user_df.shape)
print('rating shape' , rating_df.shape)
print('movie shape' , movie_df.shape)

r_cols = ['user_id', 'movie_id', 'rating', 'unix_timestamp']
rat_tr = pd.read_csv('/gdrive/My Drive/Recom_Engine/train.txt', sep='\t', names=r_cols)
rat_tst = pd.read_csv('/gdrive/My Drive/Recom_Engine/test.txt', sep='\t', names=r_cols)
rat_tr.shape, rat_tst.shape

rat_tr.head(), rat_tst.head()

#calculating number of unique users and items to build a matrix
n_users = rating_df.user_id.unique().shape[0] # 943
n_items = rating_df.movie_id.unique().shape[0] # 1682)

#user item matrix to calculate similarity between users and item
data_matrix = np.zeros((n_users, n_items))
print(data_matrix)

for line in rating_df.itertuples(): # to iterate over rows lines[1] means 2nd column of df
  data_matrix[line[1]-1, line[2]-1] = line[3]

# row = user , col = movie , value = rating

# calculating pairwise distance between user-user and item-item seperately

from sklearn.metrics.pairwise import pairwise_distances 

user_similarity = pairwise_distances(data_matrix, metric='cosine')
item_similarity = pairwise_distances(data_matrix.T, metric='cosine')

# prediction based on these similarity

def predict(ratings, similarity, type='user'):
    if type == 'user':
        mean_user_rating = ratings.mean(axis=1) # mean along the row ,array of numbers
        #We use np.newaxis so that mean_user_rating has same format as ratings
        ratings_diff = (ratings - mean_user_rating[:, np.newaxis]) #  943 rows 1 column in mean_user_rating[] (column vector)
        pred = mean_user_rating[:, np.newaxis] + similarity.dot(ratings_diff) / np.array([np.abs(similarity).sum(axis=1)]).T
    elif type == 'item':
        pred = ratings.dot(similarity) / np.array([np.abs(similarity).sum(axis=1)])
    return pred

#predictions based on user-user similarity and item-item similarity.
user_prediction = predict(data_matrix, user_similarity, type='user')
item_prediction = predict(data_matrix, item_similarity, type='item')

"""***Building a collaborative filtering model using Turicreate Library***"""

pip list

#train_data = turicreate.Sframe.read_csv('/gdrive/My Drive/Recom_Engine/train.txt', sep='\t', names=r_cols)
#test_data = turicreate.Sframe.read_csv('/gdrive/My Drive/Recom_Engine/train.txt', sep='\t', names=r_cols)
pip install -U turicreate==5.5.1

import turicreate

from turicreate import SFrame

train_data = turicreate.SFrame(rat_tr)
test_data = turicreate.SFrame(rat_tst)

'''will start with a simple popularity model and then build a collaborative filtering model.
build a model which will recommend movies based on the most popular choices, i.e., a model
 where all the users receive the same recommendation(s). We will use the turicreate recommender function popularity_recommender for this.'''

popularity_model = turicreate.popularity_recommender.create(train_data, user_id='user_id', item_id='movie_id', target='rating')

# recommend the top 5 items for the first 5 users in our dataset.

popularity_recomm = popularity_model.recommend(users=[1,2,3,4,5],k=5)
popularity_recomm.print_rows(num_rows=25)

"""collaborative filtering model. it's the item similarity model and make top 5 recommendations for the first 5 users."""

#Training the model
item_sim_model = turicreate.item_similarity_recommender.create(train_data, user_id='user_id', item_id='movie_id', target='rating', similarity_type='cosine')

#Making recommendations
item_sim_recomm = item_sim_model.recommend(users=[1,2,3,4,5],k=5)
item_sim_recomm.print_rows(num_rows=25)

model_performance = turicreate.recommender.util.compare_models(test_data, [popularity_model, item_sim_model])



